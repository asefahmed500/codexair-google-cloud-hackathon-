'use server';
/**
 * @fileOverview A Genkit tool to fetch details for a Common Weakness Enumeration (CWE) ID.
 * This is a conceptual tool. In a real implementation, it would call the NVD API or a similar service.
 *
 * - fetchCveDetailsTool - The Genkit tool definition.
 * - CveDetailsInput - Input schema for the tool.
 * - CveDetailsOutput - Output schema for the tool.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const CveDetailsInputSchema = z.object({
  cweId: z.string().describe('The Common Weakness Enumeration (CWE) identifier, e.g., "CWE-79".'),
});
export type CveDetailsInput = z.infer<typeof CveDetailsInputSchema>;

export const CveDetailsOutputSchema = z.object({
  cweId: z.string().describe('The CWE identifier.'),
  name: z.string().describe('The common name of the weakness.'),
  description: z.string().describe('A detailed description of the weakness.'),
  url: z.string().url().optional().describe('A URL for more information about the CWE (e.g., NVD or MITRE).'),
});
export type CveDetailsOutput = z.infer<typeof CveDetailsOutputSchema>;

export const fetchCveDetailsTool = ai.defineTool(
  {
    name: 'fetchCveDetails',
    description: 'Fetches detailed information for a given Common Weakness Enumeration (CWE) ID. Use this to provide more context on identified security weaknesses.',
    inputSchema: CveDetailsInputSchema,
    outputSchema: CveDetailsOutputSchema,
  },
  async (input) => {
    console.log(`[fetchCveDetailsTool] Received request for CWE: ${input.cweId}`);
    // In a real implementation, you would fetch data from NVD API or similar.
    // Example: const response = await fetch(`https://nvd.nist.gov/rest/json/cves/2.0?cweId=${input.cweId}`);
    // const data = await response.json(); ... parse and return relevant info.

    // Placeholder data:
    if (input.cweId === 'CWE-79') {
      return {
        cweId: 'CWE-79',
        name: 'Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')',
        description: 'The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.',
        url: `https://cwe.mitre.org/data/definitions/79.html`,
      };
    }
    if (input.cweId === 'CWE-89') {
        return {
            cweId: 'CWE-89',
            name: 'Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')',
            description: 'The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.',
            url: `https://cwe.mitre.org/data/definitions/89.html`,
        };
    }

    // Fallback for unmocked CWEs
    return {
      cweId: input.cweId,
      name: `Details for ${input.cweId}`,
      description: `Detailed information for ${input.cweId} would be fetched from a vulnerability database. This is placeholder data.`,
      url: `https://cwe.mitre.org/data/definitions/${input.cweId.replace('CWE-', '')}.html`,
    };
  }
);
