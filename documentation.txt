
# codexair: Technical Documentation

## 1. Introduction

codexair is an AI-powered Code Review Intelligence Platform designed to help developers and teams enhance code quality, identify security vulnerabilities, and gain actionable insights from their codebase. It leverages generative AI to automate parts of the code review process, provide explanations, and enable semantic understanding of code.

## 2. Core Technologies

- **Framework:** Next.js (App Router)
- **Language:** TypeScript
- **UI Library:** React
- **UI Components:** ShadCN UI
- **Styling:** Tailwind CSS
- **Generative AI:** Genkit (with Google AI - Gemini models, e.g., `gemini-1.5-flash-latest`, `text-embedding-004`)
- **Database:** MongoDB (with Mongoose ODM)
- **Authentication:** NextAuth.js (GitHub & Google OAuth providers)
- **Vector Search:** MongoDB Atlas Vector Search

## 3. User Features

### 3.1. Authentication
- **OAuth Integration:** Secure sign-up and login using GitHub or Google.
- **Automatic Account Creation:** New users are automatically provisioned. The first user to sign up is promoted to 'admin'; subsequent users default to 'user'. User `status` defaults to 'active'. These roles and statuses are saved in the database.
- **Account Linking:** Users can link multiple OAuth providers (e.g., Google and GitHub) to the same codexair account if the emails match.

### 3.2. Dashboard (`/dashboard`)
Provides a comprehensive overview of the user's (or platform's for admin) code analysis activities.
- **Analytics Overview:** At-a-glance summary of total analyses, average quality score, critical/high security issues found, and quality score trends.
- **Recent Analyses:** A list of recently analyzed pull requests for quick access.
- **Quality Trends:** A line chart visualizing the average code quality scores over the past 30 days.
- **Top Security Issues:** Lists the most frequently identified security vulnerabilities across analyses.
- **Top Improvement Suggestions:** Highlights common areas for code enhancement.
- **Security Hotspots:** Pinpoints files with recurring critical or high-severity security issues.
- **Contributor Metrics:** Tracks analysis activity and quality scores by contributors (GitHub authors).
- **Connected Repositories:** Shows a list of the user's most recently synced GitHub repositories for quick navigation.
- **GitHub Connection Prompt:** If a user is logged in (e.g., via Google) but hasn't connected their GitHub account, a prompt encourages them to link GitHub to enable full functionality.

### 3.3. Repository Management & Sync (`/analyze`)
- **List Synced Repositories:** Displays repositories the user has connected from GitHub, with server-side pagination and search.
- **Server-Side Search:** Users can search their synced repositories by name, full name, or primary language. The search is performed on the server.
- **Comprehensive Sync:** Allows users to fetch and update their list of repositories from GitHub. This process attempts to retrieve up to 10 pages (approx. 300 repos) of the user's most recently updated repositories from GitHub, stores/updates their metadata in the local database, and also fetches the user's total repository count from GitHub.

### 3.4. Pull Request (PR) Analysis (`/analyze/[owner]/[repoName]`)
- **PR Listing:** View all open and recently closed pull requests for a selected repository, along with their current analysis status (e.g., Not Analyzed, Pending, Analyzed, Failed).
- **AI-Powered PR Analysis Initiation:** Users can initiate an in-depth analysis for any open pull request by clicking the "Analyze" button. This process generates vector embeddings for changed/added files, which are stored in the `Analyses` collection.
- **Detailed Analysis View (`/analyze/[owner]/[repoName]/[prNumber]/[analysisId]`):**
    - **AI Review Summary (Overall PR):** A concise, AI-generated summary of the key findings for the entire pull request.
    - **Overall Metrics:** Displays aggregated quality score, complexity, and maintainability scores for the PR.
    - **Security Issues Tab:** Lists all identified security vulnerabilities, filterable by severity, with details.
    - **Suggestions Tab:** Lists all improvement suggestions, filterable by priority, with details.
    - **File Details Tab:** An accordion view breaking down the analysis file-by-file, showing individual scores, issues/suggestions, and a file-level AI insight.

### 3.5. Full Repository Codebase Analysis
- **Initiation:** From the repository's PR listing page (`/analyze/[owner]/[repoName]`), users can click "Analyze Repository Codebase".
- **Scope:** This feature analyzes the current state of the repository's default branch (e.g., `main`, `master`).
    - **Note:** The current version analyzes a limited number of source files (e.g., up to 5) from the default branch to ensure timely results in a synchronous operation. This is clearly communicated to the user on the scan results page.
    - Vector embeddings are generated for analyzed files and stored in the `RepositoryScans` collection.
- **Analysis Output (`/analyze/[owner]/[repoName]/scan/[scanId]`):**
    - Provides overall quality, complexity, maintainability scores, lists of security issues and suggestions, and file-by-file breakdowns for the analyzed files.
    - Includes an AI-generated summary for the entire repository scan (based on the analyzed files).
    - Clearly indicates that it's a full repository scan, not tied to a specific PR, and mentions the file analysis limitation.

### 3.6. Semantic Code Search
Leverages AI-generated vector embeddings to find semantically similar code snippets or issue resolutions across **both PR analyses and full repository scans**.
- **Contextual Search (from PR Analysis or Repository Scan):**
    - When viewing a detailed PR analysis or repository scan, users can click "Find similar past issues" or "Find similar past patterns" next to identified security issues or improvement suggestions.
    - This automatically uses the context of that specific issue/suggestion to search for semantically similar occurrences in other recently analyzed pull requests and full repository scans.
    - The system uses a `sourceType` parameter ('pr_analysis' or 'repo_scan') to fetch the source embedding from the correct collection (`analyses` or `repositoryscans`).
- **General Search Page (`/search`):**
    - A dedicated page for free-form semantic search across all indexed PR analyses and full repository scans.
    - **User Input:** Code snippets or natural language descriptions of problems/patterns.
    - **How it works:** The input text is converted to a vector embedding. This embedding is compared against the embeddings of all analyzed files from past PRs (from `analyses` collection) and full repository scans (from `repositoryscans` collection).
    - **Results:** Shows files (and their parent PRs or repository scans) that are most semantically similar to the query, along with AI insights for those files.

### 3.7. PullRequest Comparison (`/analyze/[owner]/[repoName]/compare/[prNumber1]/vs/[prNumber2]`)
- **Side-by-Side View:** Compares metadata and, if available, full analysis summaries of two pull requests from the same repository.
- **Analysis Initiation:** Option to initiate analysis for unanalyzed PRs directly from the comparison view.

### 3.8. "Explain My Code" AI Tool (`/explain`)
- **Input:** Users can paste any code snippet and optionally select the programming language.
- **Interaction:** Choose from predefined questions or ask a custom question.
- **Output:** Provides an AI-generated explanation.

### 3.9. About Page (`/about`)
- Provides information about codexair's mission and vision.
- **Contact Form:** Includes a "Get In Touch" section with a form allowing users to send messages (name, email, message) to the platform administrators. Submitted messages are stored in the database.

## 4. Admin Features

### 4.1. Admin Dashboard (`/admin`)
- **Platform-wide Overview:** Displays statistics like total users, total repositories synced, and total PR analyses.
- **User Management Section:** Integrated into the main admin page.

### 4.2. User Management (on `/admin` page)
- **View Users:** Lists all registered users with their details.
- **Role Management:** Admins can promote users to 'admin' or demote 'admin' users to 'user'.
- **Status Management:** Admins can change user account status between 'active' and 'suspended'.
- **Safeguards:** Includes checks to prevent accidental lockout of the last admin or last active admin.

### 4.3. Contact Messages (`/admin/messages`)
- **View Messages:** Admins can view messages submitted through the contact form on the About page.
- **Manage Messages:** Messages can be marked as read/unread and deleted.
- **Pagination:** Supports pagination for managing a large number of messages.

### 4.4. Analysis Summary Reports (`/admin/reports`)
- **System-Wide Reports:** Generates a report summarizing all pull request analyses.
- **CSV Download:** Allows admins to download the report as a CSV file.

### 4.5. Audit Logs (`/admin/audit`)
- **Track Admin Actions:** Logs important administrative actions such as user role changes, user status updates, and when admin reports are fetched.
- **Details:** Provides timestamp, admin user, action performed, target user (if applicable), and details.

## 5. Technical Architecture Overview

### 5.1. Frontend
- **Next.js (App Router), React, ShadCN UI, Tailwind CSS.**
- **Client-Side State Management:** React hooks, `react-hook-form`.

### 5.2. Backend (Next.js API Routes)
- Located in `src/app/api/`.
- Handles:
    - User authentication (`/api/auth/[...nextauth]`).
    - GitHub interactions (`/api/repositories`, `/api/github/repos/...`).
    - Triggering AI analyses (`/api/analyze` for PRs, `/api/repository-scan` for full repo).
    - Fetching analysis results (`/api/analysis-results/[analysisId]`, `/api/repository-scan/[scanId]`).
    - Semantic search operations (`/api/search/semantic-text-search`, `/api/search/similar-code`).
    - Contact form submissions (`/api/contact`).
    - Admin operations (`/api/admin/...`, including `/api/admin/messages`, `/api/admin/messages/[messageId]`).
- The `/api/repositories` route now supports server-side search via a `searchTerm` parameter.

### 5.3. Database (MongoDB with Mongoose)
- **MongoDB, Mongoose.**
- **Key Collections (Models defined in `src/lib/mongodb.ts`):**
    - `Users`, `Accounts`, `Sessions`, `VerificationTokens`. (User model includes `lastKnownTotalGitHubRepos` and `lastGitHubRepoCountSync`).
    - `Repositories`: Stores metadata for GitHub repositories synced by users.
    - `PullRequests`: Stores details of GitHub pull requests, linking to `Analyses`.
    - `Analyses`: Stores results of PR analyses, including file-level breakdowns and `fileAnalyses.vectorEmbedding`.
    - `RepositoryScans`: Stores results of full repository codebase scans, including `fileAnalyses.vectorEmbedding`.
    - `AuditLogs`: Records administrative actions.
    - `ContactMessages`: Stores messages submitted via the contact form.
- **Vector Embeddings:** Generated by `text-embedding-004` and stored in `Analyses.fileAnalyses.vectorEmbedding` and `RepositoryScans.fileAnalyses.vectorEmbedding` for semantic search.

### 5.4. Authentication (NextAuth.js)
- Manages user sign-up, sign-in, session handling (GitHub, Google).
- **Role & Status Handling:** The `jwt` callback in `src/lib/auth.ts` is designed to robustly set default `role: 'user'` and `status: 'active'` in the database for new users if the Mongoose schema defaults were not applied during adapter user creation. The first user is promoted to `admin`.
- Explicit cookie configuration for improved reliability.

### 5.5. GitHub Integration (Octokit.js)
- Centralized in `src/lib/github.ts`. Fetches repos, PRs, file content, user's total repo count.

## 6. Generative AI Integration (Genkit & Models)

### 6.1. Genkit Framework
- `src/ai/genkit.ts`: Initializes Genkit with `googleAI` plugin (`gemini-1.5-flash-latest`, `text-embedding-004`).
- **Flows (`src/ai/flows/`):** Encapsulate AI tasks.
- **Prompts:** Handlebars templating.

### 6.2. Google AI Models
- **`googleai/gemini-1.5-flash-latest` (or similar LLM):**
    - Code Analysis (`code-quality-analysis.ts`).
    - PR/Repository Scan Summarization (`summarize-pr-analysis-flow.ts`): This flow is used to generate summaries for both individual PRs and full repository scans based on aggregated data.
    - Code Explanation (`explain-code-flow.ts`).
- **`googleai/text-embedding-004`:**
    - **Embedding Generation:** Generates 768-dimension vector embeddings.
    - Used in:
        - `embed-text-flow.ts`: For embedding arbitrary user queries for the general search page.
        - `/api/analyze/route.ts` (PR Analysis): Embeds content of changed/added files.
        - `/api/repository-scan/route.ts` (Full Repo Scan): Embeds content of analyzed files.
    - Embeddings are stored in `fileAnalyses.vectorEmbedding` within both `Analyses` and `RepositoryScans` documents.

### 6.3. AI Flows Overview
- **`code-quality-analysis.ts`:** Core flow for analyzing single code files.
- **`summarize-pr-analysis-flow.ts`:** Generates narrative summaries for PRs and full repository scans.
- **`explain-code-flow.ts`:** Explains code snippets.
- **`embed-text-flow.ts`:** Embeds text for semantic search queries.

### 6.4. Genkit Tools
- **`fetchCveDetailsTool` (`src/ai/tools/fetch-cve-details.ts`):** Mocked tool for CWE details.

## 7. API Workflow Examples (High-Level)

### 7.1. Pull Request Analysis
- User initiates analysis.
- Backend (`/api/analyze/route.ts`): Fetches PR details, files from GitHub. Filters files (e.g., up to `MAX_FILES_TO_ANALYZE`). For each selected file:
    - Fetches content, truncates if needed.
    - Calls `analyzeCode` Genkit flow.
    - Generates vector embedding via `ai.embed()`.
- Aggregates results, calls `summarizePrAnalysis` flow.
- Saves results to `PullRequests` and `Analyses` collections (including embeddings in `Analyses.fileAnalyses.vectorEmbedding`).

### 7.2. Full Repository Codebase Scan
- User initiates scan.
- Backend (`/api/repository-scan/route.ts`): Determines default branch, fetches file tree. Filters and selects a limited number of source files (up to `MAX_FILES_TO_SCAN`). For each file:
    - Fetches content, truncates.
    - Calls `analyzeCode` flow.
    - Generates embedding via `ai.embed()`.
- Aggregates results and generates an overall summary by calling `summarizePrAnalysis` flow.
- Saves results to `RepositoryScans` collection (including embeddings in `RepositoryScans.fileAnalyses.vectorEmbedding`).

### 7.3. Semantic Search (General Query via `/search` page)
- User submits query.
- Backend (`/api/search/semantic-text-search/route.ts`):
    - Calls `embedText` Genkit flow for query embedding.
    - Calls `findSimilarCode` (from `src/lib/vector-search.ts`).
    - `findSimilarCode` executes two MongoDB Atlas `$vectorSearch` aggregations: one on `analyses` and one on `repositoryscans`. Results are combined, sorted, and limited.
- Returns list of `SimilarCodeResult` objects.

### 7.4. Semantic Search (Contextual from Analysis/Scan Page)
- User clicks "Find similar...".
- Frontend calls `POST /api/search/similar-code` with `queryAnalysisId` (ID of the current PR Analysis or Repo Scan), `queryFilename`, and `sourceType` ('pr_analysis' or 'repo_scan').
- Backend (`/api/search/similar-code/route.ts`):
    - Fetches the specified `Analysis` or `RepositoryScan` document based on `sourceType`.
    - Extracts pre-computed `vectorEmbedding` for `queryFilename`.
    - Calls `findSimilarCode`, passing this embedding, `queryAnalysisId` (for exclusion), and `queryFilename`.
- Returns results.

## 8. Security Considerations
- Authentication & Authorization by NextAuth.js.
- Input Validation with Zod schemas.
- GitHub API Access via user-specific tokens.
- Database Security with env-managed URI, Mongoose schemas.
- AI Model Safety (Genkit/Google AI built-in filters).

## 9. Local Setup & Vector Search
- **Environment Variables:** Critical variables must be configured in `.env`.
- **MongoDB Atlas Vector Search Indexes:** For semantic search, **TWO** vector search indexes must be manually configured in MongoDB Atlas:
    1.  **On the `analyses` collection (for PR Analyses):**
        -   **Index Name:** `idx_file_embeddings`
        -   **Field Path:** `fileAnalyses.vectorEmbedding`
        -   **Dimensions:** `768` (matching `text-embedding-004` output)
        -   **Similarity:** `cosine`
    2.  **On the `repositoryscans` collection (for Full Repository Scans):**
        -   **Index Name:** `idx_repo_scan_file_embeddings`
        -   **Field Path:** `fileAnalyses.vectorEmbedding`
        -   **Dimensions:** `768`
        -   **Similarity:** `cosine`
- **Development Servers:** Next.js app (`npm run dev`) and Genkit dev server (`npm run genkit:dev`) must be running.

## 10. Future Enhancements (from README.md)
- CI/CD Integration.
- Asynchronous Full Repository Scans (and analysis of more files).
- Enhanced Semantic Search (more sophisticated queries, filtering).
- Customizable Analysis Rules.
- Team Collaboration Features.
- IDE Integration.
- Expanded Language Support.
