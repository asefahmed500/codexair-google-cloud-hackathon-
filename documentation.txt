
# codexair: Technical Documentation

## 1. Introduction

codexair is an AI-powered Code Review Intelligence Platform, meticulously engineered to enhance the software development lifecycle. It provides developers and teams with sophisticated tools to improve code quality, identify security vulnerabilities with precision, and extract actionable insights from their codebase. By leveraging generative AI, codexair automates critical aspects of code review, offers intelligent code explanations, and enables a deeper, semantic understanding of software projects.

## 2. Core Technologies

- **Framework:** Next.js (App Router)
- **Language:** TypeScript
- **UI Library:** React
- **UI Components:** ShadCN UI
- **Styling:** Tailwind CSS
- **Generative AI:** Genkit (with Google AI - Gemini models, e.g., `gemini-1.5-flash-latest`, `text-embedding-004`)
- **Database:** MongoDB (with Mongoose ODM, includes `GlobalSettings` collection)
- **Authentication:** NextAuth.js (GitHub & Google OAuth providers)
- **Vector Search:** MongoDB Atlas Vector Search

## 3. User Features

### 3.1. Authentication
- **OAuth Integration:** Secure sign-up and login using GitHub or Google.
- **Automatic Account Creation:** New users are automatically provisioned. The first user to sign up is promoted to 'admin'; subsequent users default to 'user'. User `status` defaults to 'active'. These roles and statuses are saved in the database.
- **Account Linking:** Users can link multiple OAuth providers (e.g., Google and GitHub) to the same codexair account if the emails match.

### 3.2. Dashboard (`/dashboard`)
Provides a comprehensive overview of the user's (or platform's for admin) code analysis activities.
- **Analytics Overview:** At-a-glance summary of total analyses, average quality score, critical/high security issues found, and quality score trends.
- **Recent Analyses:** A list of recently analyzed pull requests and repository scans for quick access.
- **Quality Trends:** A line chart visualizing the average code quality scores over the past 30 days.
- **Top Security Issues:** Lists the most frequently identified security vulnerabilities across analyses.
- **Top Improvement Suggestions:** Highlights common areas for code enhancement.
- **Security Hotspots:** Pinpoints files with recurring critical or high-severity security issues.
- **Contributor Metrics:** Tracks analysis activity and quality scores by contributors (GitHub authors).
- **Connected Repositories:** Shows a list of the user's most recently synced GitHub repositories for quick navigation.
- **GitHub Connection Prompt:** If a user is logged in (e.g., via Google) but hasn't connected their GitHub account, a prompt encourages them to link GitHub to enable full functionality.

### 3.3. Repository Management & Sync (`/analyze`)
- **List Synced Repositories:** Displays repositories the user has connected from GitHub, with server-side pagination and search. Also shows the total open PR count for each repository.
- **Server-Side Search:** Users can search their synced repositories by name, full name, or primary language. The search is performed on the server.
- **Comprehensive Sync:** Allows users to fetch and update their list of repositories from GitHub. This process attempts to retrieve up to 10 pages (approx. 300 repos) of the user's most recently updated repositories from GitHub, stores/updates their metadata in the local database, and also fetches the user's total repository count from GitHub.
- **Emergency Policy Banner:** If the admin-controlled "Emergency Policy" is active, a warning banner is displayed on this page.

### 3.4. Pull Request (PR) Analysis (`/analyze/[owner]/[repoName]`)
- **PR Listing:** View all open and recently closed pull requests for a selected repository, along with their current analysis status (e.g., Not Analyzed, Pending, Analyzed, Failed).
- **AI-Powered PR Analysis Initiation:** Users can initiate an in-depth analysis for any open pull request by clicking "**Analyze with AI**". This process generates vector embeddings for changed/added files, which are stored in the `Analyses` collection for semantic search.
- **Detailed Analysis View (`/analyze/[owner]/[repoName]/[prNumber]/[analysisId]`):**
    - **AI Review Summary (Overall PR):** A concise, AI-generated summary of the key findings for the entire pull request. Includes a "**TL;DR Summary**" toggle for a bullet-point overview.
    - **Overall Metrics:** Displays aggregated quality score, complexity, and maintainability scores for the PR.
    - **Security Issues Tab:** Lists all identified security vulnerabilities, filterable by severity. Users can mark issues as "**Resolved**" and toggle visibility of resolved items using a "Show Resolved" switch.
    - **Suggestions Tab:** Lists all improvement suggestions, filterable by priority. Users can mark suggestions as "**Resolved**" and toggle visibility of resolved items. Suggestions with code examples feature a "**Copy Fix**" button.
    - **File Details Tab:** An accordion view breaking down the analysis file-by-file, showing individual scores, issues/suggestions, and a file-level AI insight.
    - **Emergency Policy Banner:** If the admin-controlled "Emergency Policy" is active and the PR contains critical security issues, a prominent warning banner is displayed.

### 3.5. Full Repository Codebase Analysis
- **Initiation:** From the repository's PR listing page (`/analyze/[owner]/[repoName]`), users can click "**Analyze Codebase with AI**".
- **Scope:** This feature analyzes the current state of the repository's default branch (e.g., `main`, `master`).
    - **Note:** The current version analyzes a limited number of source files (e.g., up to 5) from the default branch to ensure timely results in a synchronous operation. This is clearly communicated to the user on the scan results page.
    - Vector embeddings are generated for analyzed files and stored in the `RepositoryScans` collection for semantic search.
- **Analysis Output (`/analyze/[owner]/[repoName]/scan/[scanId]`):**
    - Provides overall quality, complexity, maintainability scores.
    - **Security Issues Tab:** Lists vulnerabilities; users can mark as "**Resolved**" and filter visibility.
    - **Suggestions Tab:** Lists suggestions; users can mark as "**Resolved**", filter visibility, and use "**Copy Fix**" for code examples.
    - File-by-file breakdowns.
    - Includes an AI-generated summary for the entire repository scan (based on the analyzed files), with a "**TL;DR Summary**" toggle.
    - Clearly indicates that it's a full repository scan, not tied to a specific PR, and mentions the file analysis limitation.

### 3.6. Semantic Code Search (AI-Powered)
codexair's Semantic Code Search transcends traditional keyword-based searching by understanding the *meaning* behind code and queries. This is achieved through:
- **AI-Driven Embedding Generation (Data Indexing):**
    - During both PR analysis (`/api/analyze`) and full repository scans (`/api/repository-scan`), the content of each analyzed code file is processed by the `googleai/text-embedding-004` AI model.
    - This model converts the code/text into a high-dimensional vector embedding, a numerical fingerprint that captures its semantic essence.
    - These embeddings are stored within the `Analyses` and `RepositoryScans` collections in MongoDB, associated with their respective files.
- **AI-Driven Query Transformation (Search Time):**
    - **General Search (`/search` page):** When a user types a natural language query or pastes a code snippet, this input is sent to the `embedText` Genkit flow. This flow, utilizing the same `text-embedding-004` model, converts the user's query into a vector embedding.
    - **Contextual Search (from analysis/scan pages):** When a user clicks "Find similar past issues/patterns," the system retrieves the pre-computed AI-generated vector embedding for the specific file and issue context from the database.
- **Intelligent Matching (MongoDB Atlas Vector Search):**
    - The query vector (either newly generated or retrieved) is then used to perform a similarity search against the stored embeddings in the `Analyses` and `RepositoryScans` collections using MongoDB Atlas's `$vectorSearch` capabilities.
    - This returns files and their parent PRs/scans that are semantically closest to the user's query, enabling discovery of related solutions, patterns, or previously addressed issues even if the exact wording or syntax differs.
- **Functionality:**
    - **Contextual Search:** From PR analysis or repository scan pages, allows users to find semantically similar occurrences related to a specific issue or suggestion by clicking "**Find similar past issues/patterns**".
    - **General Search Page (`/search`):** A dedicated page for "**Run Semantic Search**" allowing free-form queries (code or natural language) across all indexed PR analyses and repository scans. Results display similar code snippets and their AI-generated insights.

### 3.7. PullRequest Comparison (`/analyze/[owner]/[repoName]/compare/[prNumber1]/vs/[prNumber2]`)
- **Side-by-Side View:** Compares metadata and, if available, full analysis summaries of two pull requests from the same repository.
- **Analysis Initiation:** Option to initiate analysis via "**Analyze PR with AI**" for unanalyzed PRs directly from the comparison view.

### 3.8. "Explain My Code" AI Tool (`/explain`)
- **Input:** Users can paste any code snippet and optionally select the programming language.
- **Interaction:** Choose from predefined questions or ask a custom question (e.g., "How can this function be refactored for better performance?").
- **Output:** Provides an AI-generated explanation and improvement tips.

### 3.9. About Page (`/about`)
- Provides information about codexair's mission and vision.
- **Contact Form:** Includes a "Get In Touch" section with a form allowing users to send messages (name, email, message) to the platform administrators. Submitted messages are stored in the database.

## 4. Admin Features

### 4.1. Admin Dashboard (`/admin`)
- **Platform-wide Overview:** Displays statistics like total users, total repositories synced, total PR analyses, and the "**Top Time-Waster**" (most impactful issue type across all analyses based on estimated time to fix suggestions).
- **Emergency Controls:** Admins can activate/deactivate a platform-wide "Emergency Policy." When active, this (simulated) policy blocks PRs with critical security issues and notifies team leads. The policy's status is persistent and its activation/deactivation is audited.
- **Knowledge Concentration Risks:** Highlights repositories where a single author is associated with a high percentage (e.g., >70%) of analyzed PRs (Bus Factor Alert).
- **Navigation Cards:** Provides quick navigation to User Management (integrated), Contact Messages, Analysis Reports, and Audit Logs.
- **User Management Section:** Integrated into the main admin page.

### 4.2. User Management (on `/admin` page)
- **View Users:** Lists all registered users with their details.
- **Role Management:** Admins can promote users to 'admin' or demote 'admin' users to 'user'.
- **Status Management:** Admins can change user account status between 'active' and 'suspended'.
- **Safeguards:** Includes checks to prevent accidental lockout of the last admin or last active admin.

### 4.3. Contact Messages (`/admin/messages`)
- **View Messages:** Admins can view messages submitted through the contact form on the About page.
- **Manage Messages:** Messages can be marked as read/unread and deleted.
- **Pagination:** Supports pagination for managing a large number of messages.

### 4.4. Analysis Summary Reports (`/admin/reports`)
- **System-Wide Reports:** Generates a report summarizing all pull request analyses.
- **CSV Download:** Allows admins to "**Download Report (CSV)**".

### 4.5. Audit Logs (`/admin/audit`)
- **Track Admin Actions:** Logs important administrative actions such as user role changes, user status updates, when admin reports are fetched, and Emergency Policy activations/deactivations.
- **Details:** Provides timestamp, admin user, action performed, target user (if applicable), and details.

## 5. Technical Architecture Overview

### 5.1. Frontend
- **Next.js (App Router), React, ShadCN UI, Tailwind CSS.**
- **Client-Side State Management:** React hooks (`useState`, `useEffect`), `react-hook-form`. Handles toggles for "TL;DR Summary" and "Show Resolved" issues.

### 5.2. Backend (Next.js API Routes)
- Located in `src/app/api/`.
- Handles:
    - User authentication (`/api/auth/[...nextauth]`).
    - GitHub interactions (`/api/repositories`, `/api/github/repos/...`).
    - Triggering AI analyses (`/api/analyze` for PRs, `/api/repository-scan` for full repo).
    - Fetching analysis results (`/api/analysis-results/[analysisId]`, `/api/repository-scan/[scanId]`).
    - On-demand TL;DR summaries (`/api/analysis-results/[analysisId]/tldr-summary`, `/api/repository-scan/[scanId]/tldr-summary`).
    - Marking analysis items as resolved (`/api/analysis-items/[analysisOrScanId]/resolve-item`).
    - Semantic search operations (`/api/search/semantic-text-search`, `/api/search/similar-code`).
    - Contact form submissions (`/api/contact`).
    - Admin operations (`/api/admin/...`, including `/api/admin/messages`, `/api/admin/messages/[messageId]`, `/api/admin/summary-stats`, `/api/admin/bus-factor-alerts`, `/api/admin/settings/emergency-policy`, `/api/admin/audit-action`).
    - Global settings access (`/api/settings/emergency-policy`).
- The `/api/repositories` route now supports server-side search via a `searchTerm` parameter and displays total open PR counts for repositories.

### 5.3. Database (MongoDB with Mongoose)
- **MongoDB, Mongoose.**
- **Key Collections (Models defined in `src/lib/mongodb.ts`):**
    - `Users`, `Accounts`, `Sessions`, `VerificationTokens`. (User model includes `lastKnownTotalGitHubRepos` and `lastGitHubRepoCountSync`).
    - `Repositories`: Stores metadata for GitHub repositories synced by users.
    - `PullRequests`: Stores details of GitHub pull requests, linking to `Analyses`. Includes `analysisStatus` and `qualityScore`.
    - `Analyses`: Stores results of PR analyses, including file-level breakdowns, `fileAnalyses.vectorEmbedding`, and `resolved` status for issues/suggestions.
    - `RepositoryScans`: Stores results of full repository codebase scans, including `fileAnalyses.vectorEmbedding`, and `resolved` status for issues/suggestions.
    - `AuditLogs`: Records administrative actions, including Emergency Policy changes.
    - `ContactMessages`: Stores messages submitted via the contact form.
    - `GlobalSettings`: Stores platform-wide settings like the Emergency Policy status.
- **Vector Embeddings:** Generated by `text-embedding-004` and stored in `Analyses.fileAnalyses.vectorEmbedding` and `RepositoryScans.fileAnalyses.vectorEmbedding` for semantic search.

### 5.4. Authentication (NextAuth.js)
- Manages user sign-up, sign-in, session handling (GitHub, Google).
- **Role & Status Handling:** The `jwt` callback in `src/lib/auth.ts` is designed to robustly set default `role: 'user'` and `status: 'active'` in the database for new users if the Mongoose schema defaults were not applied during adapter user creation. The first user is promoted to `admin`.
- Explicit cookie configuration for improved reliability.

### 5.5. GitHub Integration (Octokit.js)
- Centralized in `src/lib/github.ts`. Fetches repos, PRs, file content, user's total repo count, default branch, commit SHAs, and file trees.

## 6. Generative AI Integration (Genkit & Models)

### 6.1. Genkit Framework
- `src/ai/genkit.ts`: Initializes Genkit with `googleAI` plugin (`gemini-1.5-flash-latest`, `text-embedding-004`).
- **Flows (`src/ai/flows/`):** Encapsulate AI tasks.
- **Prompts:** Handlebars templating.

### 6.2. Google AI Models
- **`googleai/gemini-1.5-flash-latest` (or similar LLM):**
    - Code Analysis (`code-quality-analysis.ts`). Outputs `codeExample` for suggestions.
    - PR/Repository Scan Summarization (`summarize-pr-analysis-flow.ts`): This flow is used to generate summaries for both individual PRs and full repository scans based on aggregated data. Now accepts a `tldrMode` parameter to generate concise bullet-point summaries.
    - Code Explanation (`explain-code-flow.ts`).
- **`googleai/text-embedding-004`:**
    - **Embedding Generation:** Generates 768-dimension vector embeddings.
    - Used in:
        - `embed-text-flow.ts`: For embedding arbitrary user queries for the general search page.
        - `/api/analyze/route.ts` (PR Analysis): Embeds content of changed/added files.
        - `/api/repository-scan/route.ts` (Full Repo Scan): Embeds content of analyzed files.
    - Embeddings are stored in `fileAnalyses.vectorEmbedding` within both `Analyses` and `RepositoryScans` documents.

### 6.3. AI Flows Overview
- **`code-quality-analysis.ts`:** Core flow for analyzing single code files. Produces `codeExample` for suggestions.
- **`summarize-pr-analysis-flow.ts`:** Generates narrative summaries for PRs and full repository scans. Now supports `tldrMode` for concise summaries.
- **`explain-code-flow.ts`:** Explains code snippets based on user questions (predefined or custom).
- **`embed-text-flow.ts`:** Embeds text for semantic search queries.

### 6.4. Genkit Tools
- **`fetchCveDetailsTool` (`src/ai/tools/fetch-cve-details.ts`):** Mocked tool for CWE details.

## 7. API Workflow Examples (High-Level)

### 7.1. Pull Request Analysis
- User initiates analysis via "**Analyze with AI**".
- Backend (`/api/analyze/route.ts`): Fetches PR details, files from GitHub. Filters files (e.g., up to `MAX_FILES_TO_ANALYZE`). For each selected file:
    - Fetches content (diff or full, truncates if needed for analysis, uses full for embedding).
    - Calls `analyzeCode` Genkit flow for quality, security, suggestions (including `codeExample`).
    - Generates vector embedding for file content via `ai.embed()` using `text-embedding-004`.
- Aggregates results, calls `summarizePrAnalysis` flow for overall PR summary (default detailed summary).
- Saves analysis results to `Analyses` collection (including `fileAnalyses.vectorEmbedding` and default `resolved: false` for issues/suggestions). Updates `PullRequests` document with analysis ID, status, and quality score.

### 7.2. Full Repository Codebase Scan
- User initiates scan via "**Analyze Codebase with AI**".
- Backend (`/api/repository-scan/route.ts`): Determines default branch, fetches file tree. Filters and selects a limited number of source files (up to `MAX_FILES_TO_SCAN`). For each file:
    - Fetches full content (truncates if needed for analysis, uses full for embedding).
    - Calls `analyzeCode` flow (including `codeExample`).
    - Generates vector embedding for file content via `ai.embed()` using `text-embedding-004`.
- Aggregates results and generates an overall summary by calling `summarizePrAnalysis` flow (default detailed summary).
- Saves results to `RepositoryScans` collection (including `fileAnalyses.vectorEmbedding` and default `resolved: false`).

### 7.3. Semantic Search (General Query via `/search` page)
- User submits query on `/search` page.
- Backend (`/api/search/semantic-text-search/route.ts`):
    - Calls `embedText` Genkit flow to generate an embedding for the user's query text using `text-embedding-004`.
    - Calls `findSimilarCode` (from `src/lib/vector-search.ts`).
    - `findSimilarCode` executes two MongoDB Atlas `$vectorSearch` aggregations: one on `analyses` (for PRs) and one on `repositoryscans` (for full scans), comparing the query embedding against stored `fileAnalyses.vectorEmbedding`. Results are combined, sorted by similarity, and limited.
- Returns list of `SimilarCodeResult` objects.

### 7.4. Semantic Search (Contextual from Analysis/Scan Page)
- User clicks "**Find similar past issues/patterns**" on a PR analysis or repository scan page.
- Frontend calls `POST /api/search/similar-code` with `queryAnalysisId` (ID of the current PR Analysis or Repo Scan), `queryFilename`, and `sourceType` ('pr_analysis' or 'repo_scan').
- Backend (`/api/search/similar-code/route.ts`):
    - Fetches the specified `Analysis` or `RepositoryScan` document based on `sourceType`.
    - Extracts the pre-computed `vectorEmbedding` for the `queryFilename` from that document.
    - Calls `findSimilarCode`, passing this embedding, `queryAnalysisId` (for exclusion), and `queryFilename`.
- Returns list of `SimilarCodeResult` objects.

### 7.5. Marking an Issue/Suggestion as Resolved
- User toggles the "Resolved" switch on an analysis detail page.
- Frontend calls `PATCH /api/analysis-items/[analysisOrScanId]/resolve-item`.
- Backend: Validates input, finds the parent `Analysis` or `RepositoryScan` document, locates the specific item using title, file, line, and description, updates its `resolved` status, and saves the document.

### 7.6. Toggling Emergency Policy (Admin)
- Admin clicks the "Activate/Deactivate Emergency Policy" button on `/admin`.
- Frontend calls `PATCH /api/admin/settings/emergency-policy` with `{ enabled: true/false }`.
- Backend: Updates the `emergencyPolicy` document in `GlobalSettings` and creates an audit log entry.
- Other frontend pages (e.g., PR list, PR detail) call `GET /api/settings/emergency-policy` to fetch the current status and display relevant warning banners.

## 8. Security Considerations
- Authentication & Authorization by NextAuth.js.
- Input Validation with Zod schemas in API routes and Genkit flows.
- GitHub API Access via user-specific tokens (scoped appropriately).
- Database Security with env-managed URI, Mongoose schemas.
- AI Model Safety (Genkit/Google AI built-in filters).
- Admin-controlled Emergency Policy (simulated blocking) for critical vulnerabilities.

## 9. Local Setup & Vector Search
- **Environment Variables:** Critical variables must be configured in `.env`.
- **MongoDB Atlas Vector Search Indexes:** For semantic search, **TWO** vector search indexes must be manually configured in MongoDB Atlas:
    1.  **On the `analyses` collection (for PR Analyses):**
        -   **Index Name:** `idx_file_embeddings`
        -   **Field Path:** `fileAnalyses.vectorEmbedding`
        -   **Dimensions:** `768` (matching `text-embedding-004` output)
        -   **Similarity:** `cosine`
    2.  **On the `repositoryscans` collection (for Full Repository Scans):**
        -   **Index Name:** `idx_repo_scan_file_embeddings`
        -   **Field Path:** `fileAnalyses.vectorEmbedding`
        -   **Dimensions:** `768`
        -   **Similarity:** `cosine`
- **Development Servers:** Next.js app (`npm run dev`) and Genkit dev server (`npm run genkit:dev`) must be running.

## 10. Future Enhancements (from README.md)
- CI/CD Integration (e.g., *actually* blocking PRs based on Emergency Policy).
- Asynchronous Full Repository Scans (and analysis of more files).
- Enhanced Semantic Search (more sophisticated queries, filtering).
- Customizable Analysis Rules.
- Team Collaboration Features.
- IDE Integration.
- Expanded Language Support.

    