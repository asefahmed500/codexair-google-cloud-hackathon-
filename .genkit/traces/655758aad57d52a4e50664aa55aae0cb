{"traceId":"655758aad57d52a4e50664aa55aae0cb","spans":{"d02ef0c17664d1e7":{"spanId":"d02ef0c17664d1e7","traceId":"655758aad57d52a4e50664aa55aae0cb","startTime":1749975721623,"endTime":1749975721655.7627,"attributes":{"genkit:type":"promptTemplate","genkit:name":"render","genkit:input":"{\"code\":\"\",\"filename\":\"\"}","genkit:path":"/{analyzeCodePrompt,t:action}/{render,t:promptTemplate}","genkit:output":"{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"You are an expert Code Review AI. Analyze the following code snippet from the file \\\"\\\" for overall quality, security, performance, complexity, maintainability, code smells, and style.\\n\\n  Code to Analyze:\\n  ```\\n  \\n  ```\\n\\n  Analysis Instructions:\\n  1.  **Quality Score (1-10):** Provide an overall quality score. This numerical score will be part of the 'qualityScore' field. Consider readability, structure, and best practices.\\n  2.  **Complexity & Maintainability Scores:** Assess and provide numerical scores for these. 'complexity' should reflect cyclomatic or cognitive complexity. 'maintainability' should be an index (0-100 or similar).\\n  3.  **Security Scanning (Security Issues):**\\n      *   Identify security flaws (e.g., XSS, SQL Injection, Auth Bypass, Info Leaks, Hardcoded Secrets/Credentials - CWE-798).\\n      *   For each, specify: 'type', 'severity' (critical, high, medium, low), 'title', 'description', 'file', 'line'.\\n      *   **Crucially, for the 'suggestion' field, provide an actionable fix, ideally as a corrected code example. For example, if XSS is found from `req.query.name`, the suggestion might be `Use res.send(escape(req.query.name))`. For hardcoded secrets, suggest environment variables or a secrets manager.**\\n      *   If you identify a specific Common Weakness Enumeration (CWE) ID (e.g., CWE-79, CWE-89, CWE-798), you MUST include it in the 'cwe' field. If you provide a CWE, use the 'fetchCveDetails' tool to get more information to enrich your analysis if the model deems it necessary.\\n  4.  **Improvement Suggestions (Performance, Code Smells, Style, Readability, Duplication, Maintainability Aspects, etc.):**\\n      *   **Performance Suggestions:** Identify performance bottlenecks. Set 'type' to 'performance' or 'optimization'. Example: 'title': \\\"Inefficient Loop Detected\\\", 'description': \\\"Replace O(n¬≤) loop with hashmap (O(n)) for better performance.\\\" Include a 'codeExample' if applicable.\\n      *   **Code Smell Detection & Complexity Issues:** Identify issues like long methods, deeply nested code, duplicated code, or overly complex logic. Set 'type' to 'code_smell'. Example: 'title': \\\"Long Method Detected\\\", 'description': \\\"Method 'processData' is 42 lines long. Consider breaking it into smaller, more manageable functions.\\\" Also, use this for issues like \\\"Avoid Deep Nesting.\\\"\\n      *   **Style, Readability & Maintainability Aspects:** Address issues related to coding conventions, naming (poor naming), formatting, magic numbers, missing documentation. Set 'type' to 'style'. Example: 'title': \\\"Inconsistent Naming Convention\\\", 'description': \\\"Variable 'user_data' uses snake_case while other variables use camelCase. Standardize to camelCase for consistency.\\\", 'codeExample': \\\"const userData = ...\\\". For magic numbers: 'title': \\\"Avoid Magic Numbers\\\", 'description': \\\"Replace '3.14' with a named constant like 'PI'.\\\" For missing docs: 'title': \\\"Add Documentation\\\", 'description': \\\"Consider adding JSDoc comments to explain the function's purpose, parameters, and return value.\\\"\\n      *   **Potential Bugs:** Identify logic errors or potential runtime issues. Set 'type' to 'bug'. Example: 'title': \\\"Potential Null Pointer Exception\\\", 'description': \\\"Object 'response.data' might be null here, leading to an error if 'response.data.items' is accessed without a check.\\\"\\n      *   Provide 'priority' (high, medium, low) for all suggestions.\\n      *   Include 'codeExample' where it significantly clarifies the suggestion.\\n  5.  **Code Metrics:** Calculate lines of code, cyclomatic complexity, cognitive complexity, and number of duplicate code blocks.\\n  6.  **AI Insights (File-Level Summary):** Provide an overall summary of your findings for this *specific file*. Format it exactly like this:\\n      ```markdown\\n      ## AI Review Summary\\n      ‚úÖ [qualityScore]/10 quality score\\n      ‚ö†Ô∏è [Number] Critical/High Issues ([Comma-separated list of critical/high issue titles for this file, if any, e.g., \\\"SQLi, Hardcoded Secret\\\"])\\n      üí° [Number] Optimizations/Suggestions Available (for this file)\\n      ```\\n      Replace bracketed placeholders with actual values based *only on the current file's analysis*. If no critical/high issues for this file, state \\\"0 Critical/High Issues\\\". If no optimizations for this file, state \\\"0 Optimizations/Suggestions Available\\\".\\n\\n  Filename context: \\n  Respond strictly in the JSON format defined by the output schema. Ensure all fields are populated accurately based on your analysis of the provided code.\\n  \"}]}],\"tools\":[null],\"output\":{\"schema\":{\"_def\":{\"unknownKeys\":\"strip\",\"catchall\":{\"_def\":{\"typeName\":\"ZodNever\"},\"~standard\":{\"version\":1,\"vendor\":\"zod\"}},\"typeName\":\"ZodObject\"},\"~standard\":{\"version\":1,\"vendor\":\"zod\"},\"_cached\":null}}}","genkit:state":"success"},"displayName":"render","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}}},"displayName":"analyzeCodePrompt","startTime":1749975721617,"endTime":1749975721816.2515}